From d1857bd941bd48b8b3d9a861891f11b4a3ca3f05 Mon Sep 17 00:00:00 2001
From: Alexey Sotkin <alexey.sotkin@intel.com>
Date: Tue, 26 Feb 2019 17:51:29 +0300
Subject: [PATCH 3/3] Fix Parent operand of DebugFunction instruction

Even if the 'scope' operand of DISubprogram in LLVM IR points to a DIFile, in
SPIRV we should point to DebugCompilationUnit instead. This is to allign the
implementaion with SPIRV debug info specification.
---
 lib/SPIRV/LLVMToSPIRVDbgTran.cpp |  6 +++++-
 test/DebugInfo/DebugFunction.ll  | 17 +++++++++++++----
 2 files changed, 18 insertions(+), 5 deletions(-)

diff --git a/lib/SPIRV/LLVMToSPIRVDbgTran.cpp b/lib/SPIRV/LLVMToSPIRVDbgTran.cpp
index 3a6504c..468320a 100644
--- a/lib/SPIRV/LLVMToSPIRVDbgTran.cpp
+++ b/lib/SPIRV/LLVMToSPIRVDbgTran.cpp
@@ -786,7 +786,11 @@ SPIRVEntry *LLVMToSPIRVDbgTran::transDbgFunction(const DISubprogram *Func) {
   Ops[SourceIdx] = getSource(Func)->getId();
   Ops[LineIdx] = Func->getLine();
   Ops[ColumnIdx] = 0; // This version of DISubprogram has no column number
-  Ops[ParentIdx] = getScope(Func->getScope())->getId();
+  auto Scope = Func->getScope();
+  if (Scope && isa<DIFile>(Scope))
+    Ops[ParentIdx] = SPIRVCU->getId();
+  else
+    Ops[ParentIdx] = getScope(Scope)->getId();
   Ops[LinkageNameIdx] = BM->getString(Func->getLinkageName())->getId();
   Ops[FlagsIdx] = transDebugFlags(Func);
 
diff --git a/test/DebugInfo/DebugFunction.ll b/test/DebugInfo/DebugFunction.ll
index 785960e..94bd46d 100644
--- a/test/DebugInfo/DebugFunction.ll
+++ b/test/DebugInfo/DebugFunction.ll
@@ -1,3 +1,9 @@
+; Check for 2 thigs:
+; - After round trip translation function definition has !dbg metadata attached
+;   specifically if -gline-tables-only was used for Clang
+; - Parent operand of DebugFunction is DebugCompileUnit, not an OpString, even
+;   if in LLVM IR it points to a DIFile instead of DICompileUnit.
+
 ; Source:
 ; float foo(int i) {
 ;     return i * 3.14;
@@ -15,10 +21,13 @@
 target datalayout = "e-p:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024"
 target triple = "spir"
 
-; CHECK-SPIRV: DebugFunction {{.*}} [[foo:[0-9]+]] {{[0-9]+}} {{$}}
-; CHECK-SPIRV: DebugFunction {{.*}} [[k:[0-9]+]] {{[0-9]+}} {{$}}
+; CHECK-SPIRV: String [[foo:[0-9]+]] "foo"
+; CHECK-SPIRV: String [[k:[0-9]+]] "k"
+; CHECK-SPIRV: [[CU:[0-9]+]] {{[0-9]+}} DebugCompileUnit
+; CHECK-SPIRV: DebugFunction [[foo]] {{.*}} [[CU]] {{.*}} [[foo_id:[0-9]+]] {{[0-9]+}} {{$}}
+; CHECK-SPIRV: DebugFunction [[k]] {{.*}} [[CU]] {{.*}} [[k_id:[0-9]+]] {{[0-9]+}} {{$}}
 
-; CHECK-SPIRV: Function {{[0-9]+}} [[foo]]
+; CHECK-SPIRV: Function {{[0-9]+}} [[foo_id]]
 ; CHECK-LLVM: define spir_func float @_Z3fooi(i32) #{{[0-9]+}} !dbg !{{[0-9]+}} {
 define dso_local spir_func float @_Z3fooi(i32) #0 !dbg !9 {
   %2 = alloca i32, align 4
@@ -30,7 +39,7 @@ define dso_local spir_func float @_Z3fooi(i32) #0 !dbg !9 {
   ret float %6, !dbg !14
 }
 
-; CHECK-SPIRV: Function {{[0-9]+}} [[k]]
+; CHECK-SPIRV: Function {{[0-9]+}} [[k_id]]
 ; CHECK-LLVM: define spir_kernel void @_Z1kv() #{{[0-9]+}} !dbg !{{[0-9]+}}
 define dso_local spir_kernel void @_Z1kv() #1 !dbg !15 !kernel_arg_addr_space !2 !kernel_arg_access_qual !2 !kernel_arg_type !2 !kernel_arg_base_type !2 !kernel_arg_type_qual !2 {
   %1 = alloca float, align 4
-- 
1.8.3.1

